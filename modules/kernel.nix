{
  pkgs,
  lib,
  config,
  ...
}: let
  cfg = config.mth.kernel;
in {
  options = with lib; {
    mth.dev.kernel = {
      generateKernelNix =
        mkOption {
        };
      reconfigureKernel =
        mkOption {
        };
      reconfigureKernelFromScratch =
        mkOption {
        };
    };
    mth.kernel = {
      upstreamKernel = mkOption {
        default = pkgs.linuxPackages_hardened.kernel;
        type = types.raw;
        defaultText = literalExpression "pkgs.linuxPackages_hardened.kernel";
        description = lib.mdDoc ''
          This option allows you to override the upstream Linux kernel used by
          methane.
        '';
      };
      config = mkOption {
        default = {};
        type = types.str;
      };

      defconfig = mkOption {
        default = {};
        type = types.raw;
      };
      build = mkOption {
        type = types.package;
      };
    };
  };

  config = let
    upstreamKernel = cfg.upstreamKernel;
    kernelWithoutConfig = pkgs.linuxKernel.manualConfig {
      src = upstreamKernel.src;
      version = upstreamKernel.version;
      configfile = pkgs.writeText "empty-config" "";
    };
    flags = lib.concatStringsSep " " (lib.optionals (pkgs.stdenv.hostPlatform.linux-kernel ? makeFlags) pkgs.stdenv.hostPlatform.linux-kernel.makeFlags);
  in {
    mth.kernel.build = let
      derivation = pkgs.linuxKernel.manualConfig {
        src = upstreamKernel.src;
        version = upstreamKernel.version;
        configfile = pkgs.writeText "config" cfg.config;
      };
    in
      derivation;

    mth.kernel.defconfig = pkgs.runCommandCC "build-linux-defconfig" {} ''
      export original_out=$out
      export out=/tmp/garbage
      source ${kernelWithoutConfig.inputDerivation}
      source $stdenv/setup
      unpackPhase && cd linux-*
      patchPhase
      make ${flags} defconfig
      mv .config $original_out
    '';

    mth.dev.kernel = let
      kernelWithNcurses = kernelWithoutConfig.overrideAttrs (
        old:
          with pkgs.pkgsBuildHost; {
            nativeBuildInputs = old.nativeBuildInputs ++ [pkg-config ncurses];
          }
      );
      linuxBuildEnv = pkgs.pkgsBuildBuild.runCommandCC "build-linux-shell" {} ''
        export original_out=$out
        export out=/tmp/garbage
        source ${kernelWithNcurses.inputDerivation}
        source $stdenv/setup
        unpackPhase && cd linux-*
        patchPhase
        cd ..
        mkdir $original_out
        mv ./linux-* $original_out
      '';
      mkReconfigure = name: makePart:
        pkgs.pkgsBuildBuild.writeShellScriptBin "reconfigure-kernel" ''
          source ${kernelWithNcurses.inputDerivation}
          source $stdenv/setup
          export TMPDIR="/tmp"
          export TMPDIR=$(${pkgs.pkgsBuildBuild.mktemp}/bin/mktemp -d)
          export USER_PWD=$(pwd)
          cp -r ${linuxBuildEnv}/linux-* $TMPDIR/linux
          chmod -R 760 $TMPDIR -v
          cd $TMPDIR/linux
          export KCONFIG_CONFIG="$TMPDIR/.config-${config.mth.platform.name}"
          ${makePart}
          echo '# This file is @autogenerated, DO NOT EDIT.' > $USER_PWD/platforms/${config.mth.platform.name}/kernel.nix
          echo '# To modify kernel configuration, use command `just reconfigure-kernel ${config.mth.platform.name}`' >> $USER_PWD/platforms/${config.mth.platform.name}/kernel.nix
          echo "" >> $USER_PWD/platforms/${config.mth.platform.name}/kernel.nix
          echo '{' >> $USER_PWD/platforms/${config.mth.platform.name}/kernel.nix
          echo "  mth.kernel.config = ${"''"}" >> $USER_PWD/platforms/${config.mth.platform.name}/kernel.nix
          cat $KCONFIG_CONFIG >> $USER_PWD/platforms/${config.mth.platform.name}/kernel.nix
          echo "  ${"''"};" >> $USER_PWD/platforms/${config.mth.platform.name}/kernel.nix
          echo '}' >> $USER_PWD/platforms/${config.mth.platform.name}/kernel.nix
          rm -rf $TMPDIR
        '';
    in {
      reconfigureKernelFromScratch = mkReconfigure "reconfigure-kernel" ''
        cp ${cfg.defconfig} $KCONFIG_CONFIG
        make ${flags} menuconfig
      '';
      reconfigureKernel = mkReconfigure "reconfigure-kernel" ''
        cp ${pkgs.writeText "config" cfg.config} $KCONFIG_CONFIG
        make ${flags} menuconfig
      '';
    };
  };
}
